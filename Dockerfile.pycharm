
##################################################################
##                           README                             ##
##################################################################
## Este Dockerfile permite agregar, a una imagen pre-existente, ## 
## el IDE PyCharm, completamente configurado.                   ##
##################################################################



##########################
## Set GLOBAL arguments ##
##########################

# Imagen en la que instalar Pycharm
ARG BASE_IMAGE="pycpt:latest"

# Set Pycharm home
ARG PYCHARM_HOME="/opt/pycharm"

# Set Pycharm version
ARG PYCHARM_VERSION="2025.2"



##############################
## Stage 1: Install Pycharm ##
##############################

# Create image
FROM ${BASE_IMAGE}

# Update apt cache and install wget, curl and git
RUN apt-get --quiet --assume-yes update && \
    apt-get --quiet --assume-yes upgrade && \
    apt-get --quiet --assume-yes install \
        curl wget git

# Install packages required to run PyCharm IDE
RUN apt-get --quiet --assume-yes --fix-missing install \
        # Without these packages, PyCharm doesn't start
        libxrender1 libxtst6 libxi6 libfreetype6 fontconfig \
        # Without these packages, PyCharm starts, but reports that they are missing
        libatk1.0-0 libatk-bridge2.0-0 libdrm-dev libxkbcommon-dev libdbus-1-3 \
        libxcomposite1 libxdamage1 libxfixes3 libxrandr-dev libgbm1 libasound2 \
        libcups2 libatspi2.0-0 libxshmfence1 \
        # Without these packages, PyCharm starts, but shows errors when running
        procps libsecret-1-0 gnome-keyring libxss1 libxext6 e2fsprogs \
        libcanberra-gtk3-module libnss3 dbus-x11 x11-apps libglib2.0-bin \
        # Without these packages, PyCharm starts, but Markdowns are not built
        firefox-esr


# Renew ARGs
ARG PYCHARM_HOME
ARG PYCHARM_VERSION

# Download Pycharm IDE
RUN wget https://download.jetbrains.com/python/pycharm-community-${PYCHARM_VERSION}.tar.gz -P /tmp/

# Install PyCharm IDE
RUN count=$(ls /tmp/pycharm-*.tar.gz | wc -l) && [ ${count} = 1 ] \
    && mkdir ${PYCHARM_HOME} \
    && tar xzf /tmp/pycharm-*.tar.gz -C ${PYCHARM_HOME} --strip-components 1 \
    || :  # para entender porque :, ver https://stackoverflow.com/a/49348392/5076110

# Pycharm espera que los paquetes python estén en dist-packages, pero están en site-packages.
# Esto es así porque python no se instaló usando apt o apt-get, y cuando esto ocurre, la carpeta
# en la que se instalan los paquetes es site-packages y no dist-packages.
RUN mkdir -p $(find /usr/local/lib -maxdepth 1 -type d -name 'python*')/dist-packages \
    && ln -s $(find /usr/local/lib -maxdepth 1 -type d -name 'python*')/site-packages/* \
             $(find /usr/local/lib -maxdepth 1 -type d -name 'python*')/dist-packages/

# Add Pycharm to the System PATH
ENV PATH="${PYCHARM_HOME}/bin:${PATH}"

# Run PyCharm under Tini (https://github.com/krallin/tini#using-tini) -- Default (X11)
# CMD ["pycharm", "-Dide.browser.jcef.enabled=true"]
# or docker run your-image /your/program ...

# Run PyCharm under Tini (https://github.com/krallin/tini#using-tini) -- X11
# CMD ["pycharm", "-Dide.browser.jcef.enabled=true", "-Dawt.toolkit.name=XToolkit"]
# or docker run your-image /your/program ...

# Run PyCharm under Tini (https://github.com/krallin/tini#using-tini) -- Wayland
# CMD ["pycharm", "-Dide.browser.jcef.enabled=true", "-Dawt.toolkit.name=WLToolkit"]
# or docker run your-image /your/program ...

# Run PyCharm under Tini (https://github.com/krallin/tini#using-tini)
CMD ["pycharm", "--version"]
# or docker run your-image /your/program ...



#####################################################
## Usage: Commands to Build and Run this container ##
#####################################################


# General OBS:
# - Don't run Pycharm without create a non-root user!
# - Use a virtual environment when setting the interpreter!
# - Inherit packages from base interpreter when creating venv!


# CONSTRUIR IMAGEN (PYCHARM CORE)
# docker build \
#   --tag pycharm-core:latest \
#   --build-arg BASE_IMAGE="ghcr.io/danielbonhaure/run-cpt:pycpt-core-v1.0" \
#   --file Dockerfile.pycharm .

# CONSTRUIR IMAGEN (PYCHARM NON-ROOT)
# docker build \
#   --tag pycharm-pycpt:latest \
#   --build-arg BASE_IMAGE="pycharm-core:latest" \
#   --build-arg USER_UID=$(stat -c "%u" .) \
#   --build-arg USER_GID=$(stat -c "%g" .) \
#   --file Dockerfile.nonroot .


# OBS: when using wayland, run "xhost +" first and "xhost -" after 
#      for more info see: https://unix.stackexchange.com/q/593411
#      or "xhost +SI:localuser:$(id -un)" instead
#      for more info see: https://unix.stackexchange.com/a/359244
# xhost +SI:localuser:"$(id -un)"


# CORRER PYCHARM MANUALMENTE (X11)
# docker run --rm \
#   --name pycharm-pycpt \
#   --env DISPLAY=$DISPLAY \
#   --mount type=bind,src=/tmp/.X11-unix,dst=/tmp/.X11-unix,readonly \
#   --mount type=bind,src=$XDG_RUNTIME_DIR/at-spi/bus,dst=$XDG_RUNTIME_DIR/at-spi/bus,readonly \
#   --privileged \
#   --mount type=bind,src=$(pwd)/input,dst=/opt/pyCPT/input \
#   --mount type=bind,src=$(pwd)/output,dst=/opt/pyCPT/output \
#   --env-file .env \
#   --workdir /opt/pyCPT \
#   --tty --interactive pycharm-pycpt:latest  \
# pycharm -Dide.browser.jcef.enabled=true -Dawt.toolkit.name=XToolkit -Dide.browser.jcef.log.level=verbose

# CORRER PYCHARM MANUALMENTE (Wayland)
# docker run --rm \
#   --name pycharm-pycpt \
#   --env GDK_BACKEND=wayland --env QT_QPA_PLATFORM=wayland \
#   --env WAYLAND_DISPLAY=$WAYLAND_DISPLAY --env XDG_RUNTIME_DIR=/tmp \
#   --mount type=bind,src=$XDG_RUNTIME_DIR/$WAYLAND_DISPLAY,dst=/tmp/$WAYLAND_DISPLAY,readonly \
#   --mount type=bind,src=$XDG_RUNTIME_DIR/at-spi/bus,dst=$XDG_RUNTIME_DIR/at-spi/bus,readonly \
#   --mount type=bind,src=/run/dbus/system_bus_socket,dst=/run/dbus/system_bus_socket,readonly \
#   --env DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS \
#   --mount type=bind,source=$XDG_RUNTIME_DIR/bus,dst=$XDG_RUNTIME_DIR/bus,readonly \
#   --privileged \
#   --mount type=bind,src=$(pwd)/input,dst=/opt/pyCPT/input \
#   --mount type=bind,src=$(pwd)/output,dst=/opt/pyCPT/output \
#   --env-file .env \
#   --workdir /opt/pyCPT \
#   --tty --interactive pycharm-pycpt:latest \
# pycharm -Dide.browser.jcef.enabled=false -Dawt.toolkit.name=WLToolkit -Dide.browser.jcef.log.level=verbose
