
##################################################################
##                           README                             ##
##################################################################
## Este Dockerfile permite crear un contendor con todos los pa- ##
## quetes y todas las configuraciones necesarias para graficar  ##
## pron칩sticos calibrados utilizando CPT desde python (PyCPT).  ##
##################################################################



##########################
## Set GLOBAL arguments ##
##########################

# Set R version
ARG R_VERSION="4.1.2"

# Set rPLOT HOME
ARG rPLOT_HOME="/opt/rPLOT"

# Set global CRON args
ARG CRON_TIME_STR="0 0 17 * *"


#################################
## Stage 1: Install R packages ##
#################################

# Create image
FROM rocker/r-ver:${R_VERSION} AS r_builder

# set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        build-essential \
        # to install ncdf4
        libnetcdf-dev \
        # to install terra, a dependency of raster
        libgdal-dev libgeos-dev libproj-dev \
        # to install classInt, a dependency of sf
        gfortran \
        # to install units, a dependency of sf
        libudunits2-dev \
        # to install systemfonts, a dependency of ggiraph
        libfontconfig1-dev && \
    rm -rf /var/lib/apt/lists/*

# set CRAN mirror
ARG CRAN_MIRROR="getOption('repos')"

# install R packages
RUN R -e "options(warn=2); install.packages('sp', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('ncdf4', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('terra', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('raster', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('dplyr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('tibble', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('sf', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('stringr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('tidyr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('purrr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('yaml', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('glue', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('lubridate', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('gstat', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rasterVis', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('htmltools', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leaflet', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('plainview', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leafem', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('ggplot2', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rnaturalearth', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('RColorBrewer', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('httr', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('jsonlite', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('lattice', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leaflet.extras2', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('RCurl', verbose=T, repos=${CRAN_MIRROR}, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rnaturalearthdata', repos=${CRAN_MIRROR}, verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('ggiraph', verbose=T, repos=${CRAN_MIRROR}, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rgdal', verbose=T, repos=${CRAN_MIRROR}, quiet=T, keep_outputs='/tmp/')"



##########################################
## Stage 2: Copy R installation folders ##
##########################################

# Create rPLOT image
FROM rocker/r-ver:${R_VERSION} AS r_final

# set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # to be able to use ncdf4 (R)
        libnetcdf-dev \
        # to install terra, a dependency of raster (R)
        libgdal-dev \
        # to be able to import and use units (R)
        libudunits2-dev \
        # to be able to use htmlwidgets (R)
        pandoc && \
    rm -rf /var/lib/apt/lists/*

# Install R packages from r_builder
# https://forums.docker.com/t/using-multi-stage-docker-build-for-slimming-down-images-with-r-dependency/67967
RUN mkdir -p /usr/local/lib/R \
             /usr/local/lib/R/site-library
COPY --from=r_builder /usr/local/bin/R /usr/local/bin/R
COPY --from=r_builder /usr/local/bin/Rscript /usr/local/bin/Rscript
COPY --from=r_builder /usr/local/lib/R /usr/local/lib/R
COPY --from=r_builder /usr/local/lib/R/site-library /usr/local/lib/R/site-library
COPY --from=r_builder /tmp /tmp

# Set R libs paths (see: https://stat.ethz.ch/R-manual/R-devel/library/base/html/libPaths.html)
ENV R_LIBS="/usr/local/lib/R/library"
ENV R_LIBS_USER="/usr/local/lib/R/site-library"
ENV R_LIBS_SITE="/usr/local/lib/R/site-library"



#################################
## Stage 3: Create rPLOT image ##
#################################

# Create EREG image
FROM r_final AS rplot_builder

# set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Set rPLOT HOME
ARG rPLOT_HOME

# Create rPLOT_HOME folder
RUN mkdir -p ${rPLOT_HOME}

# Copy rPLOT code
COPY graficos_originales/*.R ${rPLOT_HOME}
COPY graficos_originales/plot.yaml ${rPLOT_HOME}/plot.yaml

# Create input and output folders (these folders are too big so they must be used them as volumes)
RUN mkdir -p ${rPLOT_HOME}/input
RUN mkdir -p ${rPLOT_HOME}/output
RUN mkdir -p ${rPLOT_HOME}/plots

# Save Git commit hash of this build into ${rPLOT_HOME}/repo_version.
# https://github.com/docker/hub-feedback/issues/600#issuecomment-475941394
# https://docs.docker.com/build/building/context/#keep-git-directory
COPY ./.git /tmp/git
RUN export head=$(cat /tmp/git/HEAD | cut -d' ' -f2) && \
    if echo "${head}" | grep -q "refs/heads"; then \
    export hash=$(cat /tmp/git/${head}); else export hash=${head}; fi && \
    echo "${hash}" > ${rPLOT_HOME}/repo_version && rm -rf /tmp/git

# Set permissions of app files
RUN chmod -R ug+rw,o+r ${rPLOT_HOME}



###########################################
## Stage 4: Install management packages  ##
###########################################

# Create image
FROM rplot_builder AS rplot_mgmt

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # install Tini (https://github.com/krallin/tini#using-tini)
        tini \
        # to see process with pid 1
        htop procps \
        # to allow edit files
        vim \
        # to run process with cron
        cron && \
    rm -rf /var/lib/apt/lists/*

# Setup cron to allow it run as a non root user
RUN chmod u+s $(which cron)

# Add Tini (https://github.com/krallin/tini#using-tini)
ENTRYPOINT ["/usr/bin/tini", "-g", "--"]



######################################
## Stage 5: Setup rPLOT core image  ##
######################################

# Create image
FROM rplot_mgmt AS rplot-core

# Set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Renew rPLOT_HOME
ARG rPLOT_HOME

# Renew CRON ARGs
ARG CRON_TIME_STR

# Set environment variables
ENV CRON_TIME_STR=${CRON_TIME_STR}

# Crear archivo de configuraci칩n de CRON
RUN printf "\n\
# Setup cron to run files processor \n\
${CRON_TIME_STR} /usr/bin/Rscript ${rPLOT_HOME}/plot.R >> /proc/1/fd/1 2>> /proc/1/fd/1\n\
\n" > ${PyCPT_HOME}/crontab.conf
RUN chmod a+rw ${PyCPT_HOME}/crontab.conf

# Setup CRON for root user
RUN (cat ${rPLOT_HOME}/crontab.conf) | crontab -

# Crear script de inicio.
RUN printf "#!/bin/bash \n\
set -e \n\
\n\
# Reemplazar tiempo ejecuci칩n autom치tica del procesador de archivos \n\
crontab -l | sed \"/plot.R/ s|^\S* \S* \S* \S* \S*|\$CRON_TIME_STR|g\" | crontab - \n\
\n\
# Ejecutar cron \n\
cron -fL 15 \n\
\n" > /startup.sh
RUN chmod a+x /startup.sh

# Create script to check container health
RUN printf "#!/bin/bash\n\
if [ \$(ls /tmp/plotR.pid 2>/dev/null | wc -l) != 0 ] && \n\
   [ \$(ps -ef | grep plot.R | wc -l) == 0 ] \n\
then \n\
  exit 1 \n\
else \n\
  exit 0 \n\
fi \n\
\n" > /check-healthy.sh
RUN chmod a+x /check-healthy.sh

# Run your program under Tini (https://github.com/krallin/tini#using-tini)
CMD [ "bash", "-c", "/startup.sh" ]
# or docker run your-image /your/program ...

# Verificar si hubo alguna falla en la ejecuci칩n del replicador
HEALTHCHECK --interval=3s --timeout=3s --retries=3 CMD bash /check-healthy.sh



#####################################################
## Usage: Commands to Build and Run this container ##
#####################################################


# CONSTRUIR CONTENEDOR (CORE)
# docker build --force-rm \
#   --target rplot-core \
#   --tag rplot-core:latest \
#   --build-arg CRON_TIME_STR="0 0 17 * *" \
#   --file Dockerfile.rplot ..

# CONSTRUIR IMAGEN (PYCHARM NON-ROOT)
# docker build \
#   --tag rplot-nonroot:latest \
#   --build-arg BASE_IMAGE="rplot-core:latest" \
#   --build-arg USER_UID=$(stat -c "%u" .) \
#   --build-arg USER_GID=$(stat -c "%g" .) \
#   --file Dockerfile.nonroot ..

# CORRER OPERACIONALMENTE CON CRON
# docker run --name pycpt-plt \
#   --mount type=bind,src=$(pwd)/input,dst=/opt/rPLOT/input \
#   --mount type=bind,src=$(pwd)/output,dst=/opt/rPLOT/output \
#   --mount type=bind,src=$(pwd)/plots,dst=/opt/rPLOT/plots \
#   --mount type=bind,src=$(pwd)/plot.yaml,dst=/opt/rPLOT/plot.yaml \
#   --detach rplot-nonroot:latest

# CORRER MANUALMENTE
# docker run --name pycpt-plt --rm \
#   --mount type=bind,src=$(pwd)/input,dst=/opt/rPLOT/input \
#   --mount type=bind,src=$(pwd)/output,dst=/opt/rPLOT/output \
#   --mount type=bind,src=$(pwd)/plots,dst=/opt/rPLOT/plots \
#   --mount type=bind,src=$(pwd)/plot.yaml,dst=/opt/rPLOT/plot.yaml \
#   --rm rplot-nonroot:latest Rscript /opt/rPLOT/plot.R
