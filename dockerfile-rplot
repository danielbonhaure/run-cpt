
########################
## Install R packages ##
########################

# Create image
FROM r-base:4.1.2 AS r_builder

# set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        build-essential \
        # to install ncdf4
        libnetcdf-dev \
        # to install terra, a dependency of raster
        libgdal-dev \
        # to install classInt, a dependency of sf
        gfortran \
        # to install units, a dependency of sf
        libudunits2-dev \
        # to install systemfonts, a dependency of ggiraph
        libfontconfig1-dev && \
    rm -rf /var/lib/apt/lists/*

# install R packages
RUN R -e "options(warn=2); install.packages('sp', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('ncdf4', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('raster', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('dplyr', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('tibble', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('sf', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('stringr', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('tidyr', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('purrr', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('yaml', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('glue', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('lubridate', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('gstat', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rasterVis', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('htmltools', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leaflet', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('plainview', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leafem', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('ggplot2', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rnaturalearth', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('RColorBrewer', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('httr', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('jsonlite', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('lattice', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('leaflet.extras2', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('RCurl', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rnaturalearthdata', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('ggiraph', verbose=T, quiet=T, keep_outputs='/tmp/')"
RUN R -e "options(warn=2); install.packages('rgdal', verbose=T, quiet=T, keep_outputs='/tmp/')"



########################
## CREATE FINAL IMAGE ##
########################

# Create final image
FROM r-base:4.1.2 AS rPLOT

# set environment variables
ARG DEBIAN_FRONTEND=noninteractive

# Install OS packages
RUN apt-get -y -qq update && \
    apt-get -y -qq upgrade && \
    apt-get -y -qq --no-install-recommends install \
        # to be able to use ncdf4 (R)
        libnetcdf-dev \
        # to install terra, a dependency of raster (R)
        libgdal-dev \
        # to be able to import and use units (R)
        libudunits2-dev \
        # to be able to use htmlwidgets (R)
        pandoc \
        # install Tini (https://github.com/krallin/tini#using-tini)
        tini \
        # to see process with pid 1
        htop \
        # to run sudo
        sudo \
        # to allow edit files
        vim \
        # to run process with cron
        cron && \
    rm -rf /var/lib/apt/lists/*

# Setup cron to allow it run as a non root user
RUN sudo chmod u+s $(which cron)

# Install R packages from r_builder
# https://forums.docker.com/t/using-multi-stage-docker-build-for-slimming-down-images-with-r-dependency/67967
RUN mkdir -p /usr/lib/R \
             /usr/local/lib/R/site-library
COPY --from=r_builder /usr/bin/R /usr/bin/R
COPY --from=r_builder /usr/bin/Rscript /usr/bin/Rscript
COPY --from=r_builder /usr/lib/R /usr/lib/R
COPY --from=r_builder /usr/local/lib/R/site-library /usr/local/lib/R/site-library
COPY --from=r_builder /tmp /tmp

# Create work directory
RUN mkdir -p /opt/rPLOT

# Copy app code
COPY *.R /opt/rPLOT/
COPY plot.yaml /opt/rPLOT/plot.yaml

# Create input and output folders (these folders are too big so they must be used them as volumes)
RUN mkdir -p /opt/rPLOT/input
RUN mkdir -p /opt/rPLOT/output
RUN mkdir -p /opt/rPLOT/plots



#######################
## SETUP FINAL IMAGE ##
#######################

# Import final image
FROM rplot

# Set passwords
ARG ROOT_PWD="nonroot"
ARG NON_ROOT_PWD="nonroot"

# Pasar a root
USER root

# Modify root password
RUN echo "root:$ROOT_PWD" | chpasswd

# La imagen de r tiene un usuario docker con el uid 1000 y un grupo docker
# con el gid 1000. Generalmente esos uid y gid con los de los usuarios
# que serán dueños de los datos a ser leídos. Por lo tanto, es necesario
# modificar el uid del usuario docker y el gid del grupo docker.
RUN usermod -u 999 docker
RUN find / -ignore_readdir_race -user 1000 -exec chown -h docker {} \;
RUN groupmod -g 999 docker
RUN find / -ignore_readdir_race -group 1000 -exec chgrp -h docker {} \;

# Create a non-root user, so the container can run as non-root
# OBS: the UID and GID must be the same as the user that own the
# input and the output volumes, so there isn't perms problems!!
ARG NON_ROOT_USR="nonroot"
ARG NON_ROOT_UID="1000"
ARG NON_ROOT_GID="1000"
RUN groupadd --gid $NON_ROOT_GID $NON_ROOT_USR
RUN useradd --uid $NON_ROOT_UID --gid $NON_ROOT_GID --comment "Non-root User Account" --create-home $NON_ROOT_USR

# Modify the password of the non-root user
RUN echo "$NON_ROOT_USR:$NON_ROOT_PWD" | chpasswd

# Add non-root user to sudoers
RUN adduser $NON_ROOT_USR sudo

# Setup rPLOT
RUN chown -R $NON_ROOT_UID:$NON_ROOT_GID /opt/rPLOT

# Setup cron for run once a month
RUN (echo "0 0 16 * * /usr/bin/Rscript /opt/rPLOT/plot.R >> /proc/1/fd/1 2>> /proc/1/fd/1") | crontab -u $NON_ROOT_USR -

# Add Tini (https://github.com/krallin/tini#using-tini)
ENTRYPOINT ["/usr/bin/tini", "-g", "--"]

# Run your program under Tini (https://github.com/krallin/tini#using-tini)
CMD ["cron", "-f"]
# or docker run your-image /your/program ...

# Access non-root user directory
WORKDIR /home/$NON_ROOT_USR

# Switch back to non-root user to avoid accidental container runs as root
USER $NON_ROOT_USR

# CONSTRUIR CONTENEDOR
# export DOCKER_BUILDKIT=1
# docker build -f dockerfile-rplot \
#        --build-arg ROOT_PWD=nonroot \
#        --build-arg NON_ROOT_PWD=nonroot \
#        --build-arg NON_ROOT_UID=$(stat -c "%u" .) \
#        --build-arg NON_ROOT_GID=$(stat -c "%g" .) \
#        -t pycpt-plt .

# CORRER OPERACIONALMENTE CON CRON
# docker run --name pycpt-plt --rm \
#        --volume $(pwd)/input:/opt/rPLOT/input \
#        --volume $(pwd)/output:/opt/rPLOT/output \
#        --volume $(pwd)/plots:/opt/rPLOT/plots \
#        --volume $(pwd)/plot.yaml:/opt/rPLOT/plot.yaml \
#        --detach pycpt-plt:latest

# CORRER MANUALMENTE
# docker run --name pycpt-plt --rm \
#        --volume $(pwd)/input:/opt/rPLOT/input \
#        --volume $(pwd)/output:/opt/rPLOT/output \
#        --volume $(pwd)/plots:/opt/rPLOT/plots \
#        --volume $(pwd)/plot.yaml:/opt/rPLOT/plot.yaml \
#        pycpt-plt:latest /usr/bin/Rscript /opt/rPLOT/plot.R
